// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole @default(USER)
  accounts      Account[]
  empoloyee     Employee[] 
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model Clients {
  id        String    @id @default(cuid())
  email     String?   @db.VarChar(255)
  phone     String?   @db.VarChar(255)
  sign      Boolean   @default(false)
  initials  String?   @db.VarChar(255)
  unp       String?   @db.VarChar(255) @unique
  name      String?   @db.VarChar(255)
  orders    Orders[]  
}

model Service {
  id          String    @id @default(cuid())
  name        String?   @db.VarChar(255)
  price       Decimal?  @db.Decimal(10, 2)
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId  String
  orders      Orders[]  
}

model Category {
  id        String    @id @default(cuid())
  name      String?   @db.VarChar(255)
  service   Service[]
}

model Orders {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  comments    String?   @db.VarChar(255)
  leadTime    DateTime  @default(now())
  employee    Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  service     Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  client      Clients  @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId    String
  serviceId   String
  employeeId  String
  execution   Execution[] 
}

model Employee {
  id          String    @id @default(cuid())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  position    Position  @relation(fields: [positionId], references: [id], onDelete: Cascade)
  positionId  String 
  orders      Orders[] 
  executions  Execution[] 
}

model Position {
  id         String    @id @default(cuid())
  name       String   @db.VarChar(255)
  employee   Employee[] 
}

model Stage {
  id          String    @id @default(cuid())
  name        String   @db.VarChar(255)
  color       String    @db.VarChar(255)
  execution   Execution[] 
}

model Execution {
  id              String    @id @default(cuid())
  name            String   @db.VarChar(255)
  executionDate   DateTime  @default(now())
  employee        Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId      String
  order           Orders  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId         String
  stage           Stage  @relation(fields: [stageId], references: [id], onDelete: Cascade)
  stageId         String
}